import React, { useEffect, useState } from "react";
import { Table, Tag, Button, Select, Typography, Modal, message, Form, Input } from "antd";
import axios from "axios";

const { Title } = Typography;
const { Option } = Select;
const { TextArea } = Input;

const SendApplicationManager = () => {
  const [applications, setApplications] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [statusFilter, setStatusFilter] = useState("all");
  const [loading, setLoading] = useState(true);
  const [viewModal, setViewModal] = useState(false);
  const [selectedApp, setSelectedApp] = useState(null);
  const [form] = Form.useForm();

  useEffect(() => {
    fetchApplications();
  }, []);

  const fetchApplications = async () => {
  try {
    const user = JSON.parse(localStorage.getItem("user"));
    const token = localStorage.getItem("token"); // üëà L·∫•y token

    if (!user?._id || !token) {
      message.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p.");
      return;
    }

    const res = await axios.get(`/api/applications/received/${user._id}`, {
      headers: {
        Authorization: `Bearer ${token}`, // üëà G·ª≠i token v√†o header
      },
    });

    setApplications(res.data || []);
    setFiltered(res.data || []);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ƒë∆°n:", err);
    message.error("L·ªói khi t·∫£i danh s√°ch ƒë∆°n.");
  } finally {
    setLoading(false);
  }
};


  const handleFilterChange = (value) => {
    setStatusFilter(value);
    if (value === "all") {
      setFiltered(applications);
    } else {
      setFiltered(applications.filter((a) => a.status === value));
    }
  };

  const handleView = (record) => {
    setSelectedApp(record);
    setViewModal(true);
    form.setFieldsValue({
      status: record.status,
      reply: record.reply || "",
    });
  };

  const handleUpdateStatus = async (values) => {
  try {
    setLoading(true);

    const token = localStorage.getItem("token"); // üëà l·∫•y token t·ª´ localStorage

    await axios.put(
      `/api/applications/${selectedApp._id}`,
      {
        status: values.status,
        reply: values.reply,
        decisionAt: new Date(),
      },
      {
        headers: {
          Authorization: `Bearer ${token}`, // üëà g·ª≠i token l√™n
        },
      }
    );

    message.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n th√†nh c√¥ng!");
    setViewModal(false);
    setSelectedApp(null);
    form.resetFields();
    await fetchApplications(); // refresh danh s√°ch
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n:", err);
    message.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n th·∫•t b·∫°i.");
  } finally {
    setLoading(false);
  }
};


  const columns = [
    {
      title: "Ng∆∞·ªùi g·ª≠i",
      dataIndex: ["sender", "name"],
    },
    {
      title: "Ph√≤ng ban",
      dataIndex: ["sender", "department", "name"],
    },
    {
      title: "Ti√™u ƒë·ªÅ",
      dataIndex: "subject",
    },
    {
      title: "Lo·∫°i ƒë∆°n",
      dataIndex: "templateType",
      render: (type) => type || "Kh√°c",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      render: (status) => {
        const colorMap = {
          pending: "gold",
          approved: "green",
          rejected: "red",
          processing: "blue",
        };
        return <Tag color={colorMap[status]}>{status.toUpperCase()}</Tag>;
      },
    },
    {
      title: "Ng√†y g·ª≠i",
      dataIndex: "createdAt",
      render: (date) => new Date(date).toLocaleDateString("vi-VN"),
    },
    {
      title: "Thao t√°c",
      render: (_, record) => (
        <Button size="small" onClick={() => handleView(record)}>
          Xem v√† x·ª≠ l√Ω
        </Button>
      ),
    },
  ];

  return (
    <div style={{ padding: 24, maxWidth: 1200, margin: "0 auto" }}>
      <Title level={3}>Qu·∫£n l√Ω ƒê∆°n ƒë√£ nh·∫≠n</Title>

      <div style={{ marginBottom: 16, display: "flex", gap: 12 }}>
        <span>L·ªçc theo tr·∫°ng th√°i:</span>
        <Select
          value={statusFilter}
          onChange={handleFilterChange}
          style={{ width: 200 }}
        >
          <Option value="all">T·∫•t c·∫£</Option>
          <Option value="pending">Ch·ªù duy·ªát</Option>
          <Option value="processing">ƒêang x·ª≠ l√Ω</Option>
          <Option value="approved">ƒê√£ duy·ªát</Option>
          <Option value="rejected">T·ª´ ch·ªëi</Option>
        </Select>
      </div>

      <Table
        columns={columns}
        dataSource={filtered}
        rowKey="_id"
        loading={loading}
        pagination={{ pageSize: 10 }}
        locale={{ emptyText: "Ch∆∞a c√≥ ƒë∆°n n√†o." }}
      />

      <Modal
        open={viewModal}
        onCancel={() => {
          setViewModal(false);
          setSelectedApp(null);
          form.resetFields();
        }}
        title="Chi ti·∫øt v√† x·ª≠ l√Ω ƒë∆°n"
        footer={null}
      >
        {selectedApp && (
          <div>
            <p><strong>Ng∆∞·ªùi g·ª≠i:</strong> {selectedApp.sender?.name}</p>
            <p><strong>Ph√≤ng ban:</strong> {selectedApp.sender?.department?.name}</p>
            <p><strong>Lo·∫°i ƒë∆°n:</strong> {selectedApp.templateType || "Kh√°c"}</p>
            <p><strong>Ti√™u ƒë·ªÅ:</strong> {selectedApp.subject}</p>
            {selectedApp.fields?.length > 0 && (
              <>
                <p><strong>Th√¥ng tin b·ªï sung:</strong></p>
                {selectedApp.fields.map((field, index) => (
                  <p key={index} style={{ marginLeft: 16 }}>
                    - {field}
                  </p>
                ))}
              </>
            )}
            <p><strong>N·ªôi dung:</strong></p>
            <pre style={{ whiteSpace: "pre-wrap", background: "#f9f9f9", padding: 10, borderRadius: 4 }}>
              {selectedApp.content}
            </pre>
            {selectedApp.details && (
              <>
                <p><strong>Chi ti·∫øt b·ªï sung:</strong></p>
                <pre style={{ whiteSpace: "pre-wrap", background: "#f4f4f4", padding: 10, borderRadius: 4 }}>
                  {selectedApp.details}
                </pre>
              </>
            )}
            <p><strong>Ph·∫£n h·ªìi hi·ªán t·∫°i:</strong> {selectedApp.reply || "Ch∆∞a c√≥ ph·∫£n h·ªìi"}</p>

            <Form
              form={form}
              onFinish={handleUpdateStatus}
              layout="vertical"
              style={{ marginTop: 16 }}
            >
              <Form.Item
                name="status"
                label="C·∫≠p nh·∫≠t tr·∫°ng th√°i"
                rules={[{ required: true, message: "Vui l√≤ng ch·ªçn tr·∫°ng th√°i!" }]}
              >
                <Select>
                  <Option value="pending">Ch·ªù duy·ªát</Option>
                  <Option value="processing">ƒêang x·ª≠ l√Ω</Option>
                  <Option value="approved">ƒê√£ duy·ªát</Option>
                  <Option value="rejected">T·ª´ ch·ªëi</Option>
                </Select>
              </Form.Item>
              <Form.Item name="reply" label="Ph·∫£n h·ªìi">
                <TextArea rows={4} placeholder="Nh·∫≠p ph·∫£n h·ªìi (n·∫øu c√≥)" />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit" loading={loading}>
                  C·∫≠p nh·∫≠t
                </Button>
              </Form.Item>
            </Form>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default SendApplicationManager;