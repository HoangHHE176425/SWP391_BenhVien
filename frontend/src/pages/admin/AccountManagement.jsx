import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  message,
  Tag,
  Input,
  Modal,
  Form,
  Select,
  DatePicker,
  Space,
  notification,
  Switch,
} from "antd";
import axios from "axios";
import moment from "moment";

const { Option } = Select;
const { RangePicker } = DatePicker;

function AccountManagement() {
  const [users, setUsers] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [statusFilter, setStatusFilter] = useState(null);
  const [dateRange, setDateRange] = useState(null);
  const [editingUser, setEditingUser] = useState(null);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [form] = Form.useForm();
  const [createModalVisible, setCreateModalVisible] = useState(false);
  const [createForm] = Form.useForm();
  const [userCodeSearch, setUserCodeSearch] = useState("");
  const [logModalVisible, setLogModalVisible] = useState(false);
  const [logs, setLogs] = useState([]);
  const [selectedUserCode, setSelectedUserCode] = useState("");

  axios.interceptors.request.use((config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  });
  // Fetch all users
  const fetchUsers = async () => {
    try {
      const response = await axios.get("/api/admin/users");
      setUsers(response.data);
    } catch (err) {
      console.error(err);
      message.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng");
    }
  };
  const fetchUserLogs = async (userId, userCode) => {
    try {
      const response = await axios.get(`/api/admin/user-log/${userId}`);
      setLogs(response.data);
      setSelectedUserCode(userCode);
      setLogModalVisible(true);
    } catch (err) {
      notification.error({
        message: "L·ªói",
        description: "Kh√¥ng th·ªÉ l·∫•y log ng∆∞·ªùi d√πng",
      });
    }
  };
  // Submit c·∫≠p nh·∫≠t th√¥ng tin
  const handleEditSubmit = async () => {
  try {
    const { confirmPassword, password, ...values } = await form.validateFields();

    // üß† Trim ƒë·ªÉ so s√°nh ch√≠nh x√°c
    const trimmedPhone = values.phone?.trim();

    // üîç Ki·ªÉm tra tr√πng SƒêT n·∫øu kh√°c ng∆∞·ªùi ƒëang ch·ªânh
    const isDuplicatePhone = users.some(
      (u) =>
        u.phone === trimmedPhone &&
        u._id !== editingUser._id
    );

    if (isDuplicatePhone) {
      notification.error({
        message: "L·ªói",
        description: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i",
      });
      return;
    }

    // ‚úÖ Gi·ªØ m·∫≠t kh·∫©u c≈© n·∫øu kh√¥ng nh·∫≠p
    if (password) {
      values.password = password;
    }

    await axios.put(`/api/admin/updateUser/${editingUser._id}`, {
      ...values,
      phone: trimmedPhone,
    });

    notification.success({
      message: "Th√†nh c√¥ng",
      description: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
    });

    setEditModalVisible(false);
    fetchUsers();
  } catch (err) {
    notification.error({
      message: "L·ªói",
      description: err.response?.data?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i",
    });
  }
};




  const handleCreateUser = async () => {
    try {
      const { confirmPassword, ...values } = await createForm.validateFields();

      await axios.post(`/api/admin/createUser`, values);

      notification.success({
        message: "Th√†nh c√¥ng",
        description: "T√†i kho·∫£n m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o.",
      });

      setCreateModalVisible(false);
      createForm.resetFields();
      fetchUsers();
    } catch (err) {
      notification.error({
        message: "L·ªói",
        description: err.response?.data?.message || "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i",
      });
    }
  };


  // M·ªü modal ch·ªânh s·ª≠a
  const openEditModal = (user) => {
    setEditingUser(user);
    setEditModalVisible(true);
    form.setFieldsValue({
      user_code: user.user_code,
      name: user.name,
      email: user.email,
      phone: user.phone || "",
    });
  };

  // ƒê·ªïi tr·∫°ng th√°i t√†i kho·∫£n
  const handleChangeStatus = async (id) => {
    try {
      await axios.put(`/api/admin/changeStatus/${id}`); // ‚úÖ ƒë√∫ng route ƒë√£ c√≥
      notification.success({
        message: "Th√†nh c√¥ng",
        description: "Tr·∫°ng th√°i t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
      });

      fetchUsers();
    } catch (err) {
      notification.error({
        message: "L·ªói",
        description: err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i",
      });
    }
  };


useEffect(() => {
  axios.defaults.headers.common["Authorization"] = `Bearer ${localStorage.getItem("token")}`;
  fetchUsers();
}, []);


  // L·ªçc d·ªØ li·ªáu ng∆∞·ªùi d√πng
  const filteredUsers = users.filter((user) => {
    const lowerSearch = searchText.toLowerCase();
    const matchKeyword =
      user.name.toLowerCase().includes(lowerSearch) ||
      user.user_code?.toLowerCase().includes(lowerSearch);

    const matchStatus = statusFilter ? user.status === statusFilter : true;
    const matchDate = dateRange
      ? new Date(user.createdAt) >= dateRange[0] &&
        new Date(user.createdAt) <= dateRange[1]
      : true;

    return matchKeyword && matchStatus && matchDate;
  });

  return (
    <div>
      <h1>Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h1>
    
      {/* B·ªô l·ªçc */}
      <div style={{ marginBottom: 16, display: "flex", gap: 8, flexWrap: "wrap" }}>
        <Input
          placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c m√£"
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          style={{ width: 250 }}
        />
        <Select
          placeholder="Tr·∫°ng th√°i"
          onChange={(value) => setStatusFilter(value)}
          allowClear
          style={{ width: 150 }}
        >
          <Option value="active">ƒêang ho·∫°t ƒë·ªông</Option>
          <Option value="inactive">ƒê√£ b·ªã kh√≥a</Option>
        </Select>
        <RangePicker
          onChange={(dates) => setDateRange(dates)}
          allowClear
          format="DD/MM/YYYY"
          placeholder={["Ng√†y b·∫Øt ƒë·∫ßu", "Ng√†y k·∫øt th√∫c"]}
        />
        <Button
          onClick={() => {
            setSearchText("");
            setStatusFilter(null);
            setDateRange(null);
          }}
        >
          ƒê·∫∑t l·∫°i b·ªô l·ªçc
        </Button>
        <Space style={{ marginBottom: 16 }}>
          <Button type="primary" onClick={() => setCreateModalVisible(true)}>
            Th√™m m·ªõi
          </Button>
        </Space>

      </div>
            
      {/* B·∫£ng ng∆∞·ªùi d√πng */}
      <Table
        dataSource={filteredUsers}
        rowKey="_id"
        columns={[
          {
            title: "M√£",
            dataIndex: "user_code",
            sorter: (a, b) => a.user_code.localeCompare(b.user_code),
          },
          {
            title: "T√™n", // ‚úÖ th√™m d√≤ng n√†y
            dataIndex: "name",
            sorter: (a, b) => a.name.localeCompare(b.name),
          },

          { title: "Email", dataIndex: "email" },
          { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone" }, 
          {
            title: "Tr·∫°ng th√°i",
            dataIndex: "status",
            render: (status) => (
              <Tag color={status === "active" ? "green" : "red"}>
                {status === "active" ? "ƒêang ho·∫°t ƒë·ªông" : "ƒê√£ b·ªã kh√≥a"}
              </Tag>
            ),
          },
          {
            title: "Ng√†y t·∫°o",
            dataIndex: "createdAt",
            render: (date) => moment(date).format("DD-MM-YYYY HH:mm"),
            sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),
          },
          {
            title: "H√†nh ƒë·ªông",
            render: (_, record) => (
              <Space>
                <Switch
                  checked={record.status === "active"}
                  checkedChildren="B·∫≠t"
                  unCheckedChildren="Kh√≥a"
                  onChange={() => handleChangeStatus(record._id)}
                />
                <Button onClick={() => openEditModal(record)}>Ch·ªânh s·ª≠a</Button>
                <Button onClick={() => fetchUserLogs(record._id, record.user_code)}>Xem log</Button>
              </Space>
            ),
          },
        ]}
      />

      {/* Modal ch·ªânh s·ª≠a t√†i kho·∫£n */}
<Modal
  title="Ch·ªânh s·ª≠a t√†i kho·∫£n"
  open={editModalVisible}
  onCancel={() => setEditModalVisible(false)}
  onOk={handleEditSubmit}
  okText="L∆∞u"
  cancelText="H·ªßy"
>
  <Form layout="vertical" form={form}>
    {/* M√£ ng∆∞·ªùi d√πng (kh√¥ng ch·ªânh s·ª≠a) */}
    <Form.Item label="M√£ ng∆∞·ªùi d√πng" name="user_code">
      <Input disabled />
    </Form.Item>

    {/* T√™n */}
    <Form.Item
          name="name"
          label="T√™n"
          rules={[
    { required: true, message: "Vui l√≤ng nh·∫≠p t√™n" },
    { min: 2, message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±" },
    {
      validator: (_, value) => {
        if (value && value.trim().length === 0) {
          return Promise.reject("T√™n kh√¥ng ƒë∆∞·ª£c to√†n kho·∫£ng tr·∫Øng");
        }
        return Promise.resolve();
        },
      },
    ]}
    >
      <Input />
    </Form.Item>

    {/* Email */}
    <Form.Item
      name="email"
      label="Email"
      rules={[
        { required: true, message: "Vui l√≤ng nh·∫≠p email" },
        { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
      ]}
    >
      <Input />
    </Form.Item>

    {/* S·ªë ƒëi·ªán tho·∫°i */}
    <Form.Item name="phone" label="S·ªë ƒëi·ªán tho·∫°i" rules={[
        {
          pattern: /^0\d{9}$/,
          message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0",
        },
      ]}
      >
      <Input />
    </Form.Item>

    {/* M·∫≠t kh·∫©u m·ªõi */}
    <Form.Item
      name="password"
      label="M·∫≠t kh·∫©u m·ªõi"
      rules={[
        {
          min: 6,
          message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
        },
      ]}
      hasFeedback
    >
      <Input.Password />
    </Form.Item>

    {/* Nh·∫≠p l·∫°i m·∫≠t kh·∫©u */}
    <Form.Item
      name="confirmPassword"
      label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
      dependencies={["password"]}
      hasFeedback
      rules={[
        ({ getFieldValue }) => ({
          validator(_, value) {
            if (!value || getFieldValue("password") === value) {
              return Promise.resolve();
            }
            return Promise.reject(new Error("M·∫≠t kh·∫©u kh√¥ng kh·ªõp"));
          },
        }),
      ]}
    >
      <Input.Password />
    </Form.Item>
  </Form>
</Modal>



<Modal
  title="T·∫°o ng∆∞·ªùi d√πng m·ªõi"
  open={createModalVisible}
  onCancel={() => {
    setCreateModalVisible(false);
    createForm.resetFields();
  }}
  onOk={handleCreateUser}
  okText="T·∫°o"
  cancelText="H·ªßy"
>
  <Form layout="vertical" form={createForm}>
  {/* T√™n */}
  <Form.Item
    name="name"
    label="T√™n"
    rules={[
      { required: true, message: "Vui l√≤ng nh·∫≠p t√™n" },
      { min: 2, message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±" },
      {
        validator: (_, value) => {
          if (value && value.trim().length === 0) {
            return Promise.reject("T√™n kh√¥ng ƒë∆∞·ª£c to√†n kho·∫£ng tr·∫Øng");
          }
          return Promise.resolve();
        },
      },
    ]}
  >
    <Input />
  </Form.Item>

  {/* Email */}
  <Form.Item
    name="email"
    label="Email"
    rules={[
      { required: true, message: "Vui l√≤ng nh·∫≠p email" },
      { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
    ]}
  >
    <Input />
  </Form.Item>

  {/* M·∫≠t kh·∫©u */}
  <Form.Item
    name="password"
    label="M·∫≠t kh·∫©u"
    rules={[
      { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" },
      { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" },
    ]}
    hasFeedback
  >
    <Input.Password />
  </Form.Item>

  {/* Nh·∫≠p l·∫°i m·∫≠t kh·∫©u */}
  <Form.Item
    name="confirmPassword"
    label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
    dependencies={["password"]}
    hasFeedback
    rules={[
      { required: true, message: "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u" },
      ({ getFieldValue }) => ({
        validator(_, value) {
          if (!value || getFieldValue("password") === value) {
            return Promise.resolve();
          }
          return Promise.reject(new Error("M·∫≠t kh·∫©u kh√¥ng kh·ªõp"));
        },
      }),
    ]}
  >
    <Input.Password />
  </Form.Item>

  {/* S·ªë ƒëi·ªán tho·∫°i */}
<Form.Item
  name="phone"
  label="S·ªë ƒëi·ªán tho·∫°i"
  rules={[
    {
      pattern: /^0\d{9}$/,
      message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 0",
    },
    {
      validator: (_, value) => {
        if (!value) return Promise.resolve();

        const isDuplicate = users.some(
          (user) => user.phone === value
        );

        if (isDuplicate) {
          return Promise.reject("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i");
        }

        return Promise.resolve();
      },
    },
  ]}
>
  <Input />
</Form.Item>

</Form>


</Modal>
<Modal
  title={`L·ªãch s·ª≠ ho·∫°t ƒë·ªông: ${selectedUserCode}`}
  open={logModalVisible}
  onCancel={() => setLogModalVisible(false)}
  footer={null}
  width={700}
>
  <Table
    dataSource={logs}
    rowKey="_id"
    pagination={{ pageSize: 5 }}
    columns={[
      {
        title: "Thao t√°c",
        dataIndex: "actionType",
        render: (text) => {
          const map = {
            create: "T·∫°o",
            update: "C·∫≠p nh·∫≠t",
            delete: "X√≥a",
            changeStatus: "ƒê·ªïi tr·∫°ng th√°i",
          };
          return map[text] || text;
        },
      },
      {
        title: "Ng∆∞·ªùi th·ª±c hi·ªán",
        dataIndex: "actionBy",
        render: (val) => {
          const name = val?.name || "Kh√¥ng r√µ";
          const code = val?.employeeCode || val?.user_code || "";
          return code ? `${name} (${code})` : name;
        },
      },
      {
        title: "Th·ªùi gian",
        dataIndex: "createdAt",
        render: (date) => moment(date).format("DD/MM/YYYY HH:mm"),
      },
      {
        title: "Chi ti·∫øt thay ƒë·ªïi",
        dataIndex: "changes",
        render: (changes) =>
          changes
            ? Object.entries(changes)
                .map(([key, val]) => `${key}: ${val.from} ‚Üí ${val.to}`)
                .join(", ")
            : "-",
      },
    ]}
  />
</Modal>


    </div>
  );
}

export default AccountManagement;
